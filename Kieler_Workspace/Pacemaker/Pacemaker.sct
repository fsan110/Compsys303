
/*scchart Simple {
	
  initial state A
    --> B;
  
  state B
  --> C;
  
  state C
  --> A immediate;
}*/


scchart VVIPacemaker{
   //External Environment
  input signal VSense, VRPTO, LRITO, VPace;
  output signal VPace;
  
//  initial state A
//  --> top immediate;

 initial state top{
   
    signal VRP_ex, VRP_start, LRI_start;
    signal LRI_ex, LRI_stop;
 
    //1
    region VRP_timer :
    initial state idle
    --> timer with VRP_start;
    
    state timer
    --> idle  with VRPTO/ VRP_ex;
    
    //2
 	region VRP:
    initial state idle   
    --> waitVRP2 with VSense
    --> waitVRP2 with VPace ;
   
  	state waitVRP2
  	--> waitVRP immediate with /VRP_start;

	//Need a blank/connector state for priority to work
	state waitVRP
	--> idle with VRP_ex
	--> connectState1 with VSense;
	
	connector state connectState1
	--> waitVRP immediate;


/* Testing if two regions can exist */
//    region LRI_timer :
//    initial state idle
//    --> timer with LRI_start;
//    
//    state timer
//    --> idle  with LRITO/ LRI_ex;
    
   
    //3
//    @hide
//    region LRI:
//      initial state init
//    --> waitVRP;
//    
//    state waitVRP
//    --> waitLRI;
//    
//    state waitLRI
//    --> intState;
//    
//    state intState
//    -->waitVRP;
//    
//    //4
//    @hide    
//    region LRI_timer :
//     initial state idle
//    --> timer;
//    
//    state timer
//    --> idle;
    

	} ;
  
}

/*scchart delay {
  input int ticksToWait;
  input bool clock;
  int counter = 0;
  initial state init
  --> done immediate with
    counter >= ticksToWait
  --> init with
    clock / counter = counter + 1;
  final state done;
}*/